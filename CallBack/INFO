
-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=
					Callback Handling 
-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=	-=-=-=

WebService ------> connection Psql DB ------> Store callback 

Table CALLBACK_SPOOL

	id					Id of the table
	uniqueid 	 		Unique ID to cross-check with other platform 
	entry_time			Time the record is stored in this table
	status 	 			enum('NEW', 'QUEUE', 'SENT', 'UPDATED', 'DEAD')	
	server_ip 	 		Server IP receive the callback to initiate and handle
	
	num_attempt			number of attempt
	last_attempt_time	Time the record is stored in this table
	manager_result		Originate
	agi_result			Ok, Hangup, etc...
	
	callback_time		Time to start to initiate the callback
	
	channel				Channel on which to originate the call (SIP/123@1.1.1.4)
	exten				Extension to use on connect (must use Context & Priority with it)
	context				Context to use on connect (must use Exten & Priority with it)
	priority			Priority to use on connect (must use Context & Exten with it)
	application			Application to use on connect : meetme or other (use Data for parameters)
	data				Data if Application parameter is used
	timeout				Timeout for the connection to happen (30000)
	callerid			CallerID to use for the call
	variable			Callback info for Asterisk (variable list to transfer to the channel) var1=23|var2=24|var3=25 
	account				Account code for the call for billing purpose
	async				For the origination to be asynchronous (allows multiple calls to be generated without waiting for a response)
	actionid			The request identifier. It allows you to identify the response to this request. You may use a number or a string. 
						Useful when you make several simultaneous requests. ActionID: ABC45678901234567890 
					
				


CREATE TABLE cc_callback_spool (
    id 					bigserial NOT NULL,
	uniqueid			text,
    entry_time 			timestamp without time zone DEFAULT now(),
	
    status 				text,
	server_ip 			text,
	
	num_attempt 		int,
	last_attempt_time	timestamp without time zone,
	manager_result		text,
	agi_result			text,
	callback_time 		timestamp without time zone,
	
    channel 			text,
	exten 				text,
	context 			text,
	priority 			text,
	application 		text,
	data 				text,
	timeout 			text,
	callerid 			text,
	variable 			text,
	account 			text,
	async 				text,
	actionid 			text
) WITH OIDS;

ALTER TABLE ONLY cc_callback_spool
    ADD CONSTRAINT cc_callback_spool_uniqueid_key UNIQUE (uniqueid);


CREATE TABLE cc_server_manager (
	id 					bigserial NOT NULL,
	server_ip 			text,
	manager_host		text,
	manager_username 	text,
	manager_secret		text
) WITH OIDS;

INSERT INTO cc_server_manager (server_ip, manager_host, manager_username, manager_secret) VALUES ('default', 'localhost', 'myasterisk', 'mycode');




Perl Dispatcher Daemon
Manager connection with Asterisk










SELECT * FROM cc_callback_spool WHERE status='PENDING' AND callback_time IS NULL


1) FIND ALL THE CALLBACK TO RUN
	- callback_time  IS NULL;
	- callback_time <= CURRENT_TIME
	
2) FIND THE MANAGER INFO
	- SELECT * FROM cc_server_manager WHERE 	server_ip=''
	- IF NOT - SELECT * FROM cc_server_manager WHERE 	server_ip='default'
	
3) INITIATE THE CALLBACK (channel)
	- ORIGINATE FUNCTION

4) DETECT THE RESULT - ( Temporary error, error, Success )

5) UPDATE THE CALLBACK
