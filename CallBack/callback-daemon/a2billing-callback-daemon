#!/usr/bin/perl -w

use strict;
use DBI;
use POSIX qw(setsid);
use vars qw($dbh);

# use lib '/root/a2billing/callback-daemon/lib';
use lib '/home/areski/public_html/1COMMERCETEL/callback/daemon/callback-daemon/lib';
# use lib './lib', '../lib';
use Asterisk::Manager;

$|++;

######################### GLOBALS ########################
my $path_daemon = "/root/a2billing/callback-daemon/";
my $daemon = "CallBack-Daemon";


######################### DB PARAMETER ########################
my $dbname = "a2billing";
my $dbhost = "localhost";
my $dbport = "5432";
my $pgoptions = "";
my $pgtty = "";
my $login = "postgres";
my $pwd = "";
my $dbtype = "pgsql"; # value : mysql or pgsql

######################### LOG FILE ########################
my $log_file = "/var/log/asterisk/a2billing-daemon-callback.log";

######################### ASTERISK MANAGER ########################
my $manager_host = "127.0.0.1";
my $manager_username = "myasterisk";
my $manager_secret = "mycode";

###################### BEHAVIOUR PARAMETER ########################
my $pass_nb=0;


my $trace  = '/tmp/pgtrace.out';
my ($conn, $result, $i);
my $status;
my $timestamp;

my $DEBUG  = 0; # set this to 1 for traces



if (($path_daemon eq "") or ($daemon eq ""))
{
  print "Error in Config File check it!!\n";
  exit(0);
}

#### TEST MANAGER PARAMETER 

my $astman = new Asterisk::Manager;


# &daemonize($path_daemon);

open(LOGFILE, ">>".$log_file) || warn "Could not open >> $log_file.\n";
$timestamp = &longfmt();
print LOGFILE "[$timestamp]";
print LOGFILE "[DAEMON START]\n";
close LOGFILE;

# our infinite loop
while(1) {

    # check if there're changes
    &func_callback_processing();
 
    # wait for 5 secondes
    sleep(5);
}


#
# Subroutine that daemonize this proccess
#

sub daemonize {
    #    chdir '/home/areski/bin'   or die "Can't chdir to /: $!";
    chdir $_[0]   or die "Can't chdir to /: $!";
    open STDIN, '/dev/null'   or die "Can't read /dev/null: $!";
    open STDOUT, '>>/dev/null' or die "Can't write to /dev/null: $!";
    open STDERR, '>>/dev/null' or die "Can't write to /dev/null: $!";
    defined(my $pid = fork)   or die "Can't fork: $!";
    exit if $pid;
    setsid                    or die "Can't start a new session: $!";
    umask 0;
}



#
# This Subroutine check if there new emails to import
#

sub func_callback_processing{ 

	my ($direlem,$LINES);
	my ($dbh, $sth, $sth2 , $res);
	my $SQL="";
	my $QUERY="";
	my @server_manager;
	my @row;
	my @row2;
	my ($line, $count, $id, $uniqueid, $status, $server_ip, $num_attempt, $channel, $exten, $context, $priority, $application, $data, $timeout, $callerid, $variable, $account, $async, $actionid, $id_server_group);
	my $timestamp;

	$pass_nb++;
	open(LOGFILE, ">>".$log_file)
		|| warn "Could not open >> $log_file.\n";
	
	if ($dbtype eq "mysql")
	{
		$dbh ||= DBI->connect("dbi:mysql:$dbname:$dbhost", "$login", "$pwd");		
	}else{
		$dbh ||= DBI->connect("dbi:Pg:dbname=$dbname;host=$dbhost;port=$dbport", "$login", "$pwd");
		#$dbh ||= DBI->connect("dbi:Pg:dbname=$dbname;host=$dbhost;port=$dbport", "$login");
	}
	
	if (!$dbh) {
		$timestamp = &longfmt();
		print LOGFILE "[$timestamp]";
		print LOGFILE "ERR: Couldn't open connection: ".$DBI::errstr."\n";
		die "ERR: Couldn't open connection: ".$DBI::errstr."\n";
	}
	
	$SQL = "SELECT id, uniqueid, entry_time, status, server_ip, num_attempt, last_attempt_time, manager_result, agi_result, callback_time, channel, exten, context, priority, application, data, timeout, callerid, variable, account, async, actionid, id_server_group FROM cc_callback_spool WHERE status='PENDING'
	AND entry_time > (CURRENT_TIMESTAMP - INTERVAL '24 HOUR') AND (callback_time IS NULL OR callback_time <= CURRENT_TIMESTAMP)";
	
	# print LOGFILE $SQL;
	
	$sth = $dbh->prepare($SQL);
	$sth->execute();

	#$timestamp = &longfmt();
	#print LOGFILE "[$timestamp]";
	#print LOGFILE "Number of PENDING callbacks ".$sth->rows."\n";

	while ( @row = $sth->fetchrow ) {
   		
		$id = $row[0]; $uniqueid = $row[1]; $status = $row[3]; $server_ip = $row[4]; $num_attempt = $row[5];
		$channel = $row[10]; $exten = $row[11]; $context = $row[12]; $priority = $row[13]; $application = $row[14];
		$data = $row[15]; $timeout = $row[16]; $callerid = $row[17]; $variable = $row[18]; $account = $row[19];
		$async = $row[20]; $actionid = $row[21]; $id_server_group = $row[22];
		
		@server_manager = &get_server($dbh, $id_server_group);		
		
		if (!(@server_manager)){
			print LOGFILE "## server_manager not find for the id_server_group=".$id_server_group."\n";
			$QUERY = "UPDATE cc_callback_spool SET status='ERROR', last_attempt_time=now() WHERE id='$id'";
			print LOGFILE $QUERY;	
			$sth2 = $dbh->prepare($QUERY);
			$sth2 -> execute();
			next;
		}
		
		$astman->user($server_manager[3]);
		$astman->secret($server_manager[4]);
		$astman->host($server_manager[1]);		

		$status = $astman->connect;
		#print $astman " $status \n";
		if ( defined $status ){
			$timestamp = longfmt();
			print LOGFILE "[$timestamp]";
			print LOGFILE " ::>>> $status \n";
			# Action: Originate
			# Parameters: Channel, Exten, Context, Priority, Timeout, CallerID, Variable, Account, Application, Data
			
			my @res_manager = $astman->sendcommand( Action => 'Originate',
                                       Channel => $channel,
                                       Exten => $exten,
                                       Context => $context,
                                       Priority => $priority,
                                       Timeout => $timeout,
                                       CallerID => $callerid,
                                       Variable => $variable,
                                       Account => $account,
                                       Application => $application,
                                       Data => $data );
		
			$timestamp = &longfmt();
			print LOGFILE "[$timestamp]";
			print LOGFILE $res_manager[0].' - '.$res_manager[1].' - '.$res_manager[2].' - '.$res_manager[3]."\n";
			
			if (is_integer($num_attempt)){  $num_attempt++;
			}else{$num_attempt = 0;}
			
			
			if ( $res_manager[1] =~ /^Success/ ){
				print LOGFILE "\n[$timestamp]";
				print LOGFILE "## SUCCESS CALLBACK -> ($channel, $exten, $context, $priority)\n";
				$QUERY = "UPDATE cc_callback_spool SET status='SENT', manager_result='".$res_manager[1].'-'.$res_manager[3]."', num_attempt='$num_attempt', last_attempt_time=now(), id_server='".$server_manager[0]."' WHERE id='$id'";
				print LOGFILE $QUERY;			
				$sth2 = $dbh->prepare($QUERY);
				$sth2->execute();

				$QUERY = "UPDATE cc_server_manager SET lasttime_used=current_timestamp WHERE id ='".$server_manager[0]."'";
				#print LOGFILE "\n[$timestamp]";
                                #print LOGFILE $QUERY;
				$sth2 = $dbh->prepare($QUERY);
				$sth2->execute();


				$sth2->finish;
			}else{
				print LOGFILE "\n[$timestamp]";
				print LOGFILE "## CALLBACK FAIL \n";
				$QUERY = "UPDATE cc_callback_spool SET status='ERROR', manager_result='".$res_manager[1].'-'.$res_manager[3]."', num_attempt='$num_attempt', last_attempt_time=now(), id_server='".$server_manager[0]."' WHERE id='$id'";
				print LOGFILE $QUERY;			
				$sth2 = $dbh->prepare($QUERY);
				$sth2->execute();
				$QUERY = "UPDATE cc_server_manager SET lasttime_used=current_timestamp WHERE id ='".$server_manager[0]."'";
				#print LOGFILE "\n[$timestamp]";
				#print LOGFILE $QUERY;
				$sth2 = $dbh->prepare($QUERY);
				$sth2->execute();

				$sth2->finish;
			}
			
			
			$astman->disconnect;	
		}else{
			$timestamp = &longfmt();
			print LOGFILE "\n[$timestamp]";
			print LOGFILE "## ERROR Cannot connect to the asterisk manager! \n Please check the manager configuration...\n";	
		}
		
		$timestamp = &longfmt();
		print LOGFILE "\n[$timestamp]";
		print LOGFILE " [END SELECT] \n";		
	} # end while fetchrow
	
	
	$sth->finish;
	$dbh->disconnect;
	close LOGFILE;

}

#
# Get the less recently used manager server
#
# Return an array with the selected row
sub get_server{
	my ($dbh) = shift(@_);
	my ($id_server_group) = shift(@_);
	my $sth;
	my $SQL="";
	my @row;

	if ($id_server_group > 0){
		$SQL = "SELECT id, server_ip, manager_host, manager_username, manager_secret, lasttime_used FROM cc_server_manager WHERE id_group='".$id_server_group."' ORDER BY lasttime_used ASC LIMIT 1 OFFSET 0";
	}else{
		$SQL = "SELECT id, server_ip, manager_host, manager_username, manager_secret, lasttime_used FROM cc_server_manager ORDER BY lasttime_used ASC LIMIT 1 OFFSET 0";
	}
	print LOGFILE " SQL =".$SQL." \n";
	
	$sth = $dbh->prepare($SQL);
    $sth->execute();

	@row = $sth->fetchrow;

	return @row;
}


# Perl trim function to remove whitespace from the start and end of the string
sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

# check if a variable is an integer
sub is_integer { 
	$_[0] =~ /^[+-]?\d+$/ 
}


sub insert0 {
	my ($date) = shift;

	if ($date < 10) {
		return "0$date";
	} 

	return $date;
}

##
## Long format: Custom datestring for the logfile
###
sub longfmt {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$iddst) = localtime(time);
	my $datestring;

	$year += 1900;
	$mon++;
	$mon  = insert0($mon);
	$mday = insert0($mday);
	$min  = insert0($min);
	$sec  = insert0($sec);
	$datestring = "$year-$mon-$mday $hour:$min:$sec";
	return($datestring);
}
